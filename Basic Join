#1. Population Census
-- Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
-- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
SELECT SUM(t1.population) FROM city t1 JOIN country t2 ON t1.countrycode = t2.code WHERE t2.continent = 'Asia';

#2. African Cities
-- Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
-- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
SELECT t1.name FROM city t1 JOIN country t2 ON t1.countrycode = t2.code WHERE t2.continent = 'Africa';

#3. Average Population of Each Continent
-- Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
-- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.
SELECT o.continent, FLOOR(AVG(i.population)) FROM COUNTRY o JOIN city i ON o.code = i.countrycode GROUP BY o.continent;

#4. The Report
-- You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
-- Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade 
-- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
-- Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
SELECT
    CASE WHEN GRADES.GRADE > 7 THEN STUDENTS.NAME ELSE NULL END AS NAME,
    GRADES.GRADE,
    STUDENTS.MARKS
FROM
    STUDENTS
JOIN
    GRADES ON STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK
ORDER BY
    GRADES.GRADE DESC,
    NAME ASC,
    STUDENTS.MARKS;

#5. Top Competitors
-- Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. 
-- If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
SELECT H.HACKER_ID, H.NAME FROM HACKERS H, DIFFICULTY D, CHALLENGES C, SUBMISSIONS S 
WHERE H.HACKER_ID = S.HACKER_ID AND C.CHALLENGE_ID = S.CHALLENGE_ID AND D.DIFFICULTY_LEVEL = C.DIFFICULTY_LEVEL AND D.SCORE = S.SCORE 
GROUP BY H.HACKER_ID, H.NAME HAVING COUNT(C.CHALLENGE_ID)>1 ORDER BY COUNT(H.HACKER_ID) DESC, H.HACKER_ID;

#6. Ollivander's Inventory
-- Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
-- Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
-- Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.
SELECT W.ID, P.AGE, W.COINS_NEEDED, W.POWER 
FROM WANDS W JOIN WANDS_PROPERTY P ON W.CODE = P.CODE AND P.IS_EVIL = 0 WHERE W.COINS_NEEDED = (SELECT MIN(COINS_NEEDED) FROM WANDS WHERE CODE = W.CODE AND POWER = W.POWER)
ORDER BY W.POWER DESC, P.AGE DESC;

#7. Challenges
-- Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. 
-- If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.
SELECT hacker_id, name, duplicate FROM (
SELECT h.hacker_id, h.name, COUNT(c.challenge_id) as duplicate, COUNT(*) OVER(PARTITION BY COUNT(c.challenge_id)) AS duplicate_val, RANK() OVER(ORDER BY COUNT(c.challenge_id) DESC) AS rnk FROM hackers h
LEFT JOIN challenges c on h.hacker_id = c.hacker_id GROUP BY h.hacker_id, h.name) SUBQUERY 
WHERE duplicate_val = 1 OR rnk = 1 

#8. Contest Leaderboard
-- You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!
-- The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. 
-- If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result.
SELECT hacker_id, name, SUM(total_score) total_score FROM (
SELECT h.hacker_id, s.challenge_id, h.name, MAX(s.score) total_score FROM hackers h 
LEFT JOIN submissions s ON h.hacker_id = s.hacker_id GROUP BY h.hacker_id, h.name, s.challenge_id HAVING MAX(s.score) > 0) SUBQUERY
GROUP BY hacker_id, name ORDER BY total_score DESC, hacker_id ASC
