#1. Type of Triangle
-- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
-- Equilateral: It's a triangle with 3 sides of equal length.
-- Isosceles: It's a triangle with 2 sides of equal length.
-- Scalene: It's a triangle with 3 sides of differing lengths.
-- Not A Triangle: The given values of A, B, and C don't form a triangle.
SELECT
CASE WHEN a+b <= c OR a+c <= b OR b+c<= a THEN 'Not A Triangle' 
WHEN a = b AND b = c AND a = c THEN 'Equilateral' 
WHEN a <> b AND b <> c AND a <> c THEN 'Scalene' ELSE 'Isosceles' END FROM TRIANGLES;

#2. The PADS
-- Generate the following two result sets:
-- Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
-- Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
-- There are a total of [occupation_count] [occupation]s.
-- where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
-- Note: There will be at least two entries in the table for each type of occupation.
SELECT CONCAT (NAME, CASE WHEN OCCUPATION = 'Singer' THEN '(S)' WHEN OCCUPATION = 'Doctor' THEN '(D)' WHEN OCCUPATION = 'Actor' THEN '(A)' ELSE '(P)' END) AS OCCUPATION FROM OCCUPATIONS ORDER BY NAME ASC;
SELECT CONCAT ('There are a total of ', count(OCCUPATION),' ',lower(OCCUPATION),'s.') FROM OCCUPATIONS GROUP BY OCCUPATION ORDER BY CASE WHEN OCCUPATION = 'Doctor' THEN 1 WHEN OCCUPATION = 'Actor' THEN 2 WHEN OCCUPATION = 'Singer' THEN 3 ELSE 4 END;

#3. Occupations 
-- Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output should consist of four columns (Doctor, Professor, Singer, and Actor) in that specific order, with their respective names listed alphabetically under each column.
-- Note: Print NULL when there are no more names corresponding to an occupation.
SELECT d.name, p.name, s.name, a.name FROM
(SELECT name, ROW_NUMBER() OVER(ORDER BY name ASC) AS id FROM occupations WHERE occupation = 'Doctor') d
RIGHT JOIN (SELECT name, ROW_NUMBER() OVER(ORDER BY name ASC) AS id FROM occupations WHERE occupation = 'Professor') p ON d.id = p.id
LEFT JOIN (SELECT name, ROW_NUMBER() OVER(ORDER BY name ASC) AS id FROM occupations WHERE occupation = 'Singer') s ON p.id = s.id
LEFT JOIN (SELECT name, ROW_NUMBER() OVER(ORDER BY name ASC) AS id FROM occupations WHERE occupation = 'Actor') a ON p.id = a.id

#4. New Companies
-- Amber's conglomerate corporation just acquired some new companies. 
-- The hierarchy is Founder -> Lead Manager -> Senior Manager -> Manager -> Employee. 
-- Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
SELECT DISTINCT c.company_code, c.founder, COUNT(DISTINCT l.lead_manager_code),
COUNT(DISTINCT s.senior_manager_code), COUNT(DISTINCT m.manager_code), COUNT(DISTINCT e.employee_code) 
FROM company c
LEFT JOIN  lead_manager l ON c.company_code = l.company_code
LEFT JOIN senior_manager s ON c.company_code = s.company_code
LEFT JOIN manager m ON c.company_code = m.company_code
LEFT JOIN employee e ON c.company_code = e.company_code
GROUP BY c.company_code, c.founder
ORDER BY c.company_code asc
